(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{113:function(e,n,a){"use strict";a.d(n,"a",(function(){return u})),a.d(n,"b",(function(){return g}));var r=a(0),t=a.n(r);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function c(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){l(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,r,t=function(e,n){if(null==e)return{};var a,r,t={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var p=t.a.createContext({}),s=function(e){var n=t.a.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):c(c({},n),e)),a},u=function(e){var n=s(e.components);return t.a.createElement(p.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return t.a.createElement(t.a.Fragment,{},n)}},d=t.a.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(a),d=r,g=u["".concat(o,".").concat(d)]||u[d]||b[d]||l;return a?t.a.createElement(g,c(c({ref:n},p),{},{components:a})):t.a.createElement(g,c({ref:n},p))}));function g(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=d;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var p=2;p<l;p++)o[p]=a[p];return t.a.createElement.apply(null,o)}return t.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},88:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return o})),a.d(n,"metadata",(function(){return c})),a.d(n,"rightToc",(function(){return i})),a.d(n,"default",(function(){return s}));var r=a(2),t=a(6),l=(a(0),a(113)),o={id:"loading-graphql-files",title:"Loading .graphql Files",sidebar_label:"Loading .graphql Files"},c={unversionedId:"loading-graphql-files",id:"loading-graphql-files",isDocsHomePage:!1,title:"Loading .graphql Files",description:"To load .gql and .graphql files, first install the graphql and graphql.macro packages by running:",source:"@site/../docs/loading-graphql-files.md",slug:"/loading-graphql-files",permalink:"/cra-docs/docs/loading-graphql-files",editUrl:"https://github.com/facebook/create-react-app/edit/master/docusaurus/website/../docs/loading-graphql-files.md",version:"current",lastUpdatedBy:"sid-r-singh",lastUpdatedAt:1615715738,sidebar_label:"Loading .graphql Files",sidebar:"docs",previous:{title:"Adding Images, Fonts, and Files",permalink:"/cra-docs/docs/adding-images-fonts-and-files"},next:{title:"Using the Public Folder",permalink:"/cra-docs/docs/using-the-public-folder"}},i=[],p={rightToc:i};function s(e){var n=e.components,a=Object(t.a)(e,["components"]);return Object(l.b)("wrapper",Object(r.a)({},p,a,{components:n,mdxType:"MDXLayout"}),Object(l.b)("p",null,"To load ",Object(l.b)("inlineCode",{parentName:"p"},".gql")," and ",Object(l.b)("inlineCode",{parentName:"p"},".graphql")," files, first install the ",Object(l.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.npmjs.com/package/graphql"}),Object(l.b)("inlineCode",{parentName:"a"},"graphql"))," and ",Object(l.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.npmjs.com/package/graphql.macro"}),Object(l.b)("inlineCode",{parentName:"a"},"graphql.macro"))," packages by running:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"npm install --save graphql graphql.macro\n")),Object(l.b)("p",null,"Alternatively you may use ",Object(l.b)("inlineCode",{parentName:"p"},"yarn"),":"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"yarn add graphql graphql.macro\n")),Object(l.b)("p",null,"Then, whenever you want to load ",Object(l.b)("inlineCode",{parentName:"p"},".gql")," or ",Object(l.b)("inlineCode",{parentName:"p"},".graphql")," files, import the ",Object(l.b)("inlineCode",{parentName:"p"},"loader")," from the macro package:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import { loader } from 'graphql.macro';\n\nconst query = loader('./foo.graphql');\n")),Object(l.b)("p",null,"And your results get automatically inlined! This means that if the file above, ",Object(l.b)("inlineCode",{parentName:"p"},"foo.graphql"),", contains the following:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-graphql"}),"query {\n  hello {\n    world\n  }\n}\n")),Object(l.b)("p",null,"The previous example turns into:"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"const query = {\n  'kind': 'Document',\n  'definitions': [{\n    ...\n  }],\n  'loc': {\n    ...\n    'source': {\n      'body': '\\\\\\\\n  query {\\\\\\\\n    hello {\\\\\\\\n      world\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n',\n      'name': 'GraphQL request',\n      ...\n    }\n  }\n};\n")),Object(l.b)("p",null,"You can also use the ",Object(l.b)("inlineCode",{parentName:"p"},"gql")," template tag the same way you would use the non-macro version from ",Object(l.b)("inlineCode",{parentName:"p"},"graphql-tag")," package with the added benefit of inlined parsing results."),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import { gql } from 'graphql.macro';\n \nconst query = gql`\n  query User {\n    user(id: 5) {\n      lastName\n      ...UserEntry1\n    }\n  }\n`;\n")))}s.isMDXComponent=!0}}]);